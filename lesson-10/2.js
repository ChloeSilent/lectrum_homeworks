/**
 * Задача 2.
 *
 * Напишите функцию calculate(), которая в качестве аргументов принимает неограниченное количество функций.
 *
 * При запуске calculate() последовательно запускает коллбек-функции из аргументов.
 * Каждая коллбек-функция из цепочки в качестве своего аргумента принимает то, что возвращает предыдущая коллбек-функция.
 * То есть возвращаемое значение каждой коллбек-функции из цепочки
 * становится доступным из параметра следующей коллбек-функции в цепочке.
 *
 * Первая коллбек-функция не принимает параметров.
 *
 * После выполнения всей цепочки, функция calculate() должна вернуть результат выполнения последней коллбек-функции.
 *
 * Генерировать ошибки если:
 * - Любой из аргументов функции calculate() не является функцией;
 * - Любая функция из аргументов не вернула значение.
 */

// Решение
const calculate = function (...funcs) {

    function isFunc(elem) {
        if (elem !== 'function') {
            throw new Error("Один из аргументов функции calculate() не является функцией");
        };
    }

    funcs.every(isFunc);

    let j = funcs[0]();
    for (let i = 1; i < funcs.length; i++) {
        let currentFunct = funcs[i](j);
        j = currentFunct;
        if(j === false) {
            throw new Error("Одна функция из аргументов не вернула значение.");
        }
    }

    return j;
};


const result = calculate(
    () => {
        return 7;
    },
    prevResult => {
        return prevResult + 4;
    },
    prevResult => {
        return prevResult * 5;
    },
);

console.log(result); // 55

exports.calculate = calculate;